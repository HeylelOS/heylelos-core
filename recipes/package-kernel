#!/bin/sh

set -e
umask 022

echo "PACKAGE: kernel"

[ -z "$KERNEL_LINUX_VERSION" ] && echo 'error: Expected $KERNEL_LINUX_VERSION' && exit 1
[ -z "$ALL_TARGET_ARCH" ] && echo 'error: Expected $ALL_TARGET_ARCH' && exit 1

cd products

echo "- Packaging kernel"
packagename="linux-$KERNEL_LINUX_VERSION.hny"
if [ -f $packagename ]
then echo "- kernel package is up-to-date"
else
	if [ $KERNEL_LINUX_VERSION != "`cat ../workbench/kernel-latest`" ]
	then echo "- Built version differs from packaging one, aborting..." && exit 1
	fi

	[ ! -d kernel ] && mkdir kernel

	tail -n 14 '../workbench/kernel/LICENSES/exceptions/Linux-syscall-note' > kernel/EULA
	tail -n 340 '../workbench/kernel/LICENSES/preferred/GPL-2.0' >> kernel/EULA

	rm -f kernel/package.cpio
	../tools/cpio-entry -m 100600 -u 0 -g 0 vmlinuz "../workbench/kernel/arch/$ALL_TARGET_ARCH/boot/bzImage" >> kernel/package.cpio
	../tools/cpio-entry -m 100600 -u 0 -g 0 System.map "../workbench/kernel/System.map" >> kernel/package.cpio

	for directory in `find ../workbench/kernel/include -type d`
	do ../tools/cpio-entry -m 040755 -u 0 -g 0 "${directory#../workbench/kernel/}" >> kernel/package.cpio
	done

	for header in `find ../workbench/kernel/include -type f`
	do ../tools/cpio-entry -m 100644 -u 0 -g 0 "${header#../workbench/kernel/}" "$header" >> kernel/package.cpio
	done

	../tools/cpio-entry -m 040755 -u 0 -g 0 hny >> kernel/package.cpio
	../tools/cpio-entry -m 100755 -u 0 -g 0 hny/setup ../ingredients/kernel-hny-setup >> kernel/package.cpio
	../tools/cpio-entry -m 100755 -u 0 -g 0 hny/clean ../ingredients/kernel-hny-clean >> kernel/package.cpio
	../tools/cpio-entry -m 100644 -u 0 -g 0 hny/eula kernel/EULA >> kernel/package.cpio
	../tools/cpio-entry -u 0 -g 0 'TRAILER!!!' >> kernel/package.cpio

	if xz -C crc32 --lzma2 < kernel/package.cpio > $packagename
	then echo "- $packagename successfully packaged"
	else
		echo "- Unable to package $packagename"
		rm $packagename
		exit 1
	fi
fi

